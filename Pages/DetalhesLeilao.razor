@page "/detalhesleilao/{leilaoId:int}"
@using Controllers
@using Authentication
@using Models
@inject ILeilaoController leilaoController
@inject IUserController userController
@inject NavigationManager navigationManager
@inject IUserController userController
@inject AuthenticationStateProvider authStateProvider
@inject ILicitacaoController licitacaoController
@inject IMarcaController marcaController
@inject IModeloController modeloController

<PageTitle>Detalhes do Leilão</PageTitle>

<h3>Detalhes do Leilão</h3>

@if (leilao == null)
{
    <p>Leilão não existe.</p>
}
else
{
    <div class="card">
        <div class="card-header">
            <h5>@leilao.Titulo</h5>
        </div>
        <div class="card-body">
            <p><strong>Marca:</strong> @marcaController.GetById(veiculo.IdMarca).Nome</p>
            <p><strong>Modelo:</strong> @modeloController.GetById(veiculo.IdModelo).Nome</p>
            <p><strong>Ano:</strong> @veiculo.Ano</p>
            <p><strong>Descrição:</strong> @leilao.Descricao</p>
            <p><strong>Combustível:</strong> @veiculo.Combustivel</p>
            <p><strong>Cor:</strong> @veiculo.CorExterior</p>
            <p><strong>Kilometragem:</strong> @veiculo.Quilometragem</p>
            <p><strong>Cilindrada:</strong> @veiculo.Cilindrada</p>
            <p><strong>Potência:</strong> @veiculo.Potencia</p>
            <p><strong>Número de Portas:</strong> @veiculo.NumPortas</p>
            <p><strong>Preço Inicial:</strong> @leilao.PrecoStart€</p>
            <p><strong>Licitação Mínima:</strong> @leilao.BidMinima€</p>
            <p><strong>LICITAÇÃO ATUAL:</strong> @(licitacaoController.GetByID(leilao.IdLicitacaoAtual) == null ? leilao.PrecoStart : licitacaoController.GetByID(leilao.IdLicitacaoAtual).Valor)€</p>

            <div class="my-2">
                <button class="btn btn-primary" @onclick="UserPodeLicitar">Licitar</button>
            </div>

            @if (mostrarInputLicitar)
            {
                <AuthorizeView>
                    <Authorized>
                        <div class="form-group">
                            <label for="valorLicitar">Valor da Licitação:</label>
                            <InputNumber class="form-control" id="valorLicitar" @bind-Value="valorLicitar" />
                            <button class="btn btn-success" @onclick="Licitar">Confirmar Licitação</button>
                            @mensagem
                        </div>
                    </Authorized>
                </AuthorizeView>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int? LeilaoId { get; set; }
    private Leilao leilao;
    private Veiculo veiculo;
    private string mensagem { get; set; }
    private string username { get; set; }
    private CustomAuthenticationStateProvider customAuthStateProvider { get; set; }
    private bool mostrarInputLicitar = false;
    private decimal valorLicitar;

    private async Task InitializeAsync()
    {
        customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        username = (await customAuthStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
    }

    protected override void OnInitialized()
    {
        if (LeilaoId.HasValue)
        {
            leilao = leilaoController.GetByID(LeilaoId.Value);
            veiculo = leilaoController.GetVeiculo(LeilaoId.Value);
        }
        else
        {
            navigationManager.NavigateTo("/listarleiloes");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsync();
    }

    private async void UserPodeLicitar()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        if (!((await customAuthStateProvider.GetAuthenticationStateAsync()).User.Identity.IsAuthenticated))
        {
            navigationManager.NavigateTo("/login");
            return;
        }

        var username = (await customAuthStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        if (userController.HasMetodoPagamento(username) && userController.HasDetalhesEntrega(username))
        {
            ShowInputLicitar();

        }
        else
        {
            navigationManager.NavigateTo("/perfil");
        }
    }
    private void ShowInputLicitar()
    {

        mostrarInputLicitar = true;
        if (licitacaoController.GetByID(leilao.IdLicitacaoAtual) == null)
        {
            valorLicitar = leilao.PrecoStart + leilao.BidMinima;
        }
        else
        {
            valorLicitar = licitacaoController.GetByID(leilao.IdLicitacaoAtual).Valor + leilao.BidMinima;
        }
    }

    private void Licitar()
    {
        Licitacao licitacao;
        if (licitacaoController.GetByID(leilao.IdLicitacaoAtual) == null)
        {
            if (leilao.PrecoStart + leilao.BidMinima > valorLicitar)
            {
                Console.WriteLine("lmao");
                mensagem = "O valor inserido é demasiado baixo!";
            }

            else
            {
                licitacao = new Licitacao(valorLicitar, username, leilao.Id);
                licitacaoController.Create(licitacao);
                leilao.IdLicitacaoAtual = licitacao.Id;
                leilaoController.Update(leilao);
                mensagem = "";
            }
        }
        else if ((licitacaoController.GetByID(leilao.IdLicitacaoAtual).Valor + leilao.BidMinima) > valorLicitar)
        {
            mensagem = "O valor inserido é demasiado baixo!";
        }
        else
        {
            licitacao = new Licitacao(valorLicitar, username, leilao.Id);
            licitacaoController.Create(licitacao);
            leilao.IdLicitacaoAtual = licitacao.Id;
            leilaoController.Update(leilao);
            mensagem = "";
        }
    }
}
