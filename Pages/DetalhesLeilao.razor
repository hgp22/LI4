@page "/detalhesleilao/{leilaoId:int}"
@using Controllers
@using Authentication
@using Models
@using Data
@using System.Text.Json;
@inject ILeilaoController leilaoController
@inject IUserController userController
@inject UtilizadorService userAccountService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject ILicitacaoController licitacaoController
@inject IMarcaController marcaController
@inject IModeloController modeloController

<style>
    .form-box {
        background-color: #12232e;
    }
</style>

<PageTitle>@leilao.Titulo</PageTitle>

    @if (leilao == null)
{
    <div class="flex items-center justify-center h-screen">
        <p class="text-white text-4xl text-center font-bold underline decoration-pink-500/30">Uhhh... The auction you're looking for does not exist.</p>
    </div>
}
else
{
    <div class="text-white flex items-center justify-center flex-col">
        @if (veiculo != null && leilao.Fotografias > 0)
        {
            <div class="mb-8">
                <div class="mt-4 text-center">
                    <img id="selectedImage" src="@selectedImage" alt="Selected Image" class="selected-image object-cover rounded mx-auto" style="width: 1000px; height: 500px;">
                </div>
                <div class="flex items-center mt-4 justify-center">
                    <div class="text-center mt-4 flex flex-wrap">
                        @foreach (var imagePath in GetImagesPaths(leilao.Fotografias))
                        {
                            <img src="@imagePath" alt="Vehicle Image" class="h-16 w-16 object-cover rounded mr-2 mb-2 cursor-pointer" style="width: 100px; height: 100px;" @onclick="() => SelectImage(imagePath)" />
                        }
                    </div>
                </div>
            </div>
        }
    </div>


    <div class="grid text-white flex justify-center items-center space-x-4 px-8">

        <div class="grid-rows-2 mb-8 p-4">

            <div class="w-96 h-full bg-gray-800 p-4 rounded-lg mb-8">
                <div class="flex items-center justify-center text-center">
                </div>

                <div class="text-4xl capitalize mb-8">
                    <a>current bid: €@(licitacaoController.GetByID(leilao.IdLicitacaoAtual) == null ? leilao.ValorInicial : licitacaoController.GetByID(leilao.IdLicitacaoAtual).Valor)</a>
                </div>

                <div class="font-bold text-xs mb-2">
                    <span class="countdown" data-leilao-id="@leilao.Id" data-end-time="@leilao.DataFinal.ToString("o")"></span>
                </div>

                <div class="text-xs mb-8">
                    Minimum Bid: €@leilao.AumentoMinimo
                </div>

                <div class="grid flex items-center justify-center text-center">
                    @if (!leilao.LeilaoAcabou)
                    {
                        <button class="text-3xl mb-5 bg-blue-500 text-blue
                        px-8 py-4 rounded-md hover:bg-blue-600 focus:outline-none
                        focus:border-blue-700 focus:ring focus:ring-blue-200
                        login-button mb-8" @onclick="UserPodeLicitar">
                            BID
                        </button>
                    }
                    else
                    {
                        <label for="block text-sm font-semibold text-gray-600">LEILÃO TERMINADO!</label>
                    }
                    @if (mostrarInputLicitar)
                    {
                        <div class="">
                            <AuthorizeView>
                                <Authorized>
                                    <div class="form-group text-white">
                                        <div class="mb-4">
                                            <label for="block text-sm font-semibold text-gray-600">Bidding Price</label>
                                            <InputNumber class="text-white w-full px-4 py-2 border rounded-md focus:outline-none focus:border-blue-500 form-box" id="valorLicitar" @bind-Value="valorLicitar" />
                                        </div>

                                        <div class="mb-2">
                                            <button class="mb-5 w-full bg-blue-500 text-blue px-4 py-2
                                                    rounded-md hover:bg-blue-600 focus:outline-none
                                                    focus:border-blue-700 focus:ring focus:ring-blue-200
                                                    login-button" @onclick="Licitar">
                                                Confirmar Licitação
                                            </button>
                                        </div>
                                        <div>@mensagem</div>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    }
                </div>
        </div>

        <div class="w-96 h-full bg-gray-800 p-4 rounded-lg">
            <div class="grid grid-cols-2 gap-2 h-full">
                <div class="text-xl font-bold mb-8">Car Details:</div>
                <div></div>

                <div>Model:</div>
                <div>@marcaController.GetById(veiculo.IdMarca).Nome</div>

                <div>Year:</div>
                <div>@veiculo.Ano</div>

                <div>Doors:</div>
                <div>@veiculo.NumPortas</div>

                <div>Exterior Color:</div>
                <div>@veiculo.CorExterior</div>

                <div class="border-t mb-4"></div>
                <div></div>

                <div class="text-xl font-bold">Engine:</div><div></div>

                <div>Fuel Type:</div>
                <div>@veiculo.TipoMotor</div>

                <div>Mileage:</div>
                <div>@veiculo.Quilometragem</div>

                <div>Power:</div>
                <div>@veiculo.Potencia (hp)</div>

                <div class="border-t mb-4"></div>
            </div>
        </div>

        </div>

        <div>
            <div class="w-96 h-full bg-gray-800 p-4 rounded-lg text-center">
                <div class="text-xl font-bold mb-4">Auction Description:</div>
                <div class="text-white">@leilao.Descricao</div>
            </div>
        </div>


    </div>



}


<script>
    function updateCountdown() {
        var elements = document.querySelectorAll('.countdown');

        elements.forEach(function (element) {
            var leilaoId = element.getAttribute('data-leilao-id');
            var endTime = new Date(element.getAttribute('data-end-time')).getTime();
            var timeRemaining = Math.max(0, (endTime - Date.now()) / 1000);

            var days = Math.floor(timeRemaining / 86400);
            var hours = Math.floor((timeRemaining % 86400) / 3600);
            var minutes = Math.floor((timeRemaining % 3600) / 60);
            var seconds = Math.floor(timeRemaining % 60);

            element.innerHTML = 'Time Left: ' + days + 'd ' + hours + 'h ' + minutes + 'm ' + seconds + 's ';
        });
    }

    setInterval(updateCountdown, 1000);
</script>


<script>
    var images = @ImagesJson;

    function InitializeCarousel() {
        var imageIndex = 0;
        setInterval(function () {
            SelectImage(images[imageIndex]);
            imageIndex = (imageIndex + 1) % images.length;
        }, 3000);

        SelectImage(images[0]);
    }

    window.onload = function () {
        InitializeCarousel();
    }
</script>




@code {
    private string selectedImage;
    private string ImagesJson => GetImagesJson();
    [Parameter]
    public int? LeilaoId { get; set; }
    private Leilao leilao;
    private Veiculo veiculo;
    private string mensagem { get; set; }
    private string username { get; set; }
    private CustomAuthenticationStateProvider customAuthStateProvider { get; set; }
    private bool mostrarInputLicitar = false;
    private decimal valorLicitar;

    private void SelectImage(string imagePath)
    {
        selectedImage = imagePath;
    }

    private async Task InitializeAsync()
    {
        customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        username = (await customAuthStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
    }

    protected override void OnInitialized()
    {
        if (LeilaoId.HasValue)
        {
            leilao = leilaoController.GetByID(LeilaoId.Value);
            veiculo = leilaoController.GetVeiculo(LeilaoId.Value);
            SelectImage(GetFirstImage(leilao));
        }
        else
        {
            navigationManager.NavigateTo("/listarleiloes");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsync();
    }

    private async void UserPodeLicitar()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        if (!((await customAuthStateProvider.GetAuthenticationStateAsync()).User.Identity.IsAuthenticated))
        {
            navigationManager.NavigateTo("/login");
            return;
        }

        var username = (await customAuthStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        if (userController.HasMetodoPagamento(username) && userController.HasDetalhesEntrega(username))
        {
            ShowInputLicitar();

        }
        else
        {
            navigationManager.NavigateTo("/perfil");
        }
    }
    private void ShowInputLicitar()
    {

        mostrarInputLicitar = true;
        if (licitacaoController.GetByID(leilao.IdLicitacaoAtual) == null)
        {
            valorLicitar = leilao.ValorInicial + leilao.AumentoMinimo;
        }
        else
        {
            valorLicitar = licitacaoController.GetByID(leilao.IdLicitacaoAtual).Valor + leilao.AumentoMinimo;
        }
    }

    private string GetFirstImage(Leilao leilao)
    {
        string directoryPath = $"wwwroot/Images/{leilao.Id}";
        try
        {
            if (Directory.Exists(directoryPath))
            {
                string[] imageFiles = Directory.GetFiles(directoryPath, "0.*");
                if (imageFiles.Any())
                {
                    string firstImage = imageFiles.First();
                    string relativePath = Path.GetRelativePath("wwwroot", firstImage);
                    return "/" + relativePath.Replace(Path.DirectorySeparatorChar, '/');
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error accessing images: {ex.Message}");
        }
        return "";
    }

    private void Licitar()
    {
        Licitacao licitacao;
        if (licitacaoController.GetByID(leilao.IdLicitacaoAtual) == null)
        {
            if (leilao.ValorInicial + leilao.AumentoMinimo > valorLicitar)
            {
                mensagem = "O valor inserido é demasiado baixo!";
            }

            else
            {
                licitacao = new Licitacao(valorLicitar, username, leilao.Id);

                licitacaoController.Create(licitacao);

                leilao.IdLicitacaoAtual = licitacao.Id;
                leilaoController.Update(leilao);
                mensagem = "";
            }
        }
        else if ((licitacaoController.GetByID(leilao.IdLicitacaoAtual).Valor + leilao.AumentoMinimo) > valorLicitar)
        {

            mensagem = "O valor inserido é demasiado baixo!";
        }
        else
        {
            licitacao = new Licitacao(valorLicitar, username, leilao.Id);
            licitacaoController.Create(licitacao);
            leilao.IdLicitacaoAtual = licitacao.Id;
            leilaoController.Update(leilao);
            mensagem = "";
        }
    }

    private List<string> GetImagesPaths(int totalImages)
    {
        List<string> imagePaths = new List<string>();
        string directoryPath = $"wwwroot/Images/{leilao.Id}";
        try
        {
            if (Directory.Exists(directoryPath))
            {
                for (int i = 0; i < totalImages; i++)
                {
                    string[] paths = Directory.GetFiles(directoryPath, $"{i}.*");
                    if (paths.Length > 0)
                    {
                        string relativePath = Path.GetRelativePath("wwwroot", paths[0]);
                        imagePaths.Add("/" + relativePath.Replace(Path.DirectorySeparatorChar, '/'));
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error accessing images: {ex.Message}");
        }
        return imagePaths;
    }

    private string GetImagePath(string imageName)
    {
        string directoryPath = $"wwwroot/Images/{leilao.Id}";
        string relativePath = Path.Combine(directoryPath, imageName);
        return "/" + relativePath.Replace(Path.DirectorySeparatorChar, '/');
    }



    private string GetImagesJson()
    {
        var images = GetImagesPaths(leilao.Fotografias);
        var json = JsonSerializer.Serialize(images);
        return json;
    }
}
