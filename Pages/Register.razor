@page "/register"
@using UpShift.Authentication
@using UpShift.Models
@using UpShift.Controllers
@inject IUserController userController
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<style>
    .username-input {
        background-color: #12232e;
    }
</style>

<div class="flex grid grid-cols-2 text-white h-screen items-center">
    <div class="mx-auto">
        <div class="mb-5">
            <label for="username" class="block text-sm font-semibold text-gray-600"></label>
            <input @bind="model.UserName" class="text-white w-full px-4 py-2 border rounded-md focus:outline-none focus:border-blue-500 username-input" placeholder="Username">
        </div>

        <div class="mb-5">
            <label for="password" class="block text-sm font-semibold text-gray-600"></label>
            <input @bind="model.Password" type="password" class="text-white w-full px-4 py-2 border rounded-md focus:outline-none focus:border-blue-500 username-input" placeholder="Password">
        </div>

        <div class="mb-5">
            <label for="email" class="block text-sm font-semibold text-gray-600"></label>
            <input id="email" @bind="model.Email" type="email" class="text-white w-full px-4 py-2 border rounded-md focus:outline-none focus:border-blue-500 username-input" placeholder="Email">
        </div>

        <div class="mb-5">
            <label for="nif" class="block text-sm font-semibold text-gray-600"></label>
            <input id="nif" @bind="model.Nif" type="nif" class="text-white w-full px-4 py-2 border rounded-md focus:outline-none focus:border-blue-500 username-input" placeholder="NIF">
        </div>

        <div class="mb-5">
            <label for="name" class="block text-sm font-semibold text-gray-600"></label>
            <input id="name" @bind="model.Name" type="name" class="text-white w-full px-4 py-2 border rounded-md focus:outline-none focus:border-blue-500 username-input" placeholder="Name">
        </div>

        <div class="mb-5">
            <label for="dateofbirth" class="block text-sm font-semibold text-gray-600"></label>
            <input id="dn" @bind="model.Dn" type="dn" class="text-white w-full px-4 py-2 border rounded-md focus:outline-none focus:border-blue-500 username-input" placeholder="Date of Birth">
        </div>

        <button @onclick="RegisterAndLogin" class="mb-5 w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none focus:border-blue-700 focus:ring focus:ring-blue-200">
            Register
        </button>

        <div class="mb-5">
            <a>Already have an account?</a>
            <a href="/login" class="text-blue-500 underline">Login here</a>
        </div>
    </div>

    <div class="mx-auto dark:bg-gray-800">
        <div style="width: 30rem; height: 30rem;"
             class="flex items-center justify-center text-center">
            <div style="padding-top: 150px; padding-right: 100px; padding-bottom: 150px; padding-left: 100px"
                 class="border-2 border-blue-500 box-content">
                <div class="text-lg font-bold">Register</div>
                <div>Welcome to UpShift!</div>
            </div>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
        public string Email { get; set; }
    }

    private Model model = new Model();

    private async Task RegisterAndLogin()
    {
        var existingUser = userController.GetByUsername(model.UserName);
        var existingUser2 = userController.GetByEmail(model.Email);
        if (existingUser != null)
        {
            await js.InvokeVoidAsync("alert", "Username already in use");
            return;
        }
        if(existingUser2 != null)
        {
            await js.InvokeVoidAsync("alert", "Email already in use");
            return;
        }

        var newUser = new Utilizador(model.UserName, model.Email, model.Password, 0, "teste", new DateTime(2020, 4, 4) , false);
        if(newUser != null)
        {
            Console.WriteLine("New user created");

        }


        if (userController.Create(newUser))
        {
            Console.WriteLine("New user added with success");

        }


        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = newUser.Username,
            IsAdmin = newUser.IsAdmin
        });
        navManager.NavigateTo("/", true);
    }
}