@page "/login"
@using UpShift.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<style>
    .username-input {
        background-color: #12232e;
    }
    .password-input {
        background-color: #12232e;
    }
</style>

<div class="flex grid grid-cols-2 text-white h-screen items-center">

    <!-- Parte do Username e Pw-->
    <div class="mx-auto">
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.Username" class="form-control username-input" placeholder="Username" />
        </div>

        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control password-input" placeholder="Password" />
        </div>

        <button @onclick="Authenticate" class="mb-5 w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none focus:border-blue-700 focus:ring focus:ring-blue-200">
            Log In
        </button>

        <div class="mb-5">
            <a>Don't have an account?</a>
            <a href="/register" class="text-blue-500 underline">Register here</a>
        </div>
    </div>

    <!-- O outro quadrado -->
    <div class="mx-auto dark:bg-gray-800">
        <div style="width: 30rem; height: 30rem;" class="flex items-center justify-center text-center">
            <div style="padding-top: 150px; padding-right: 100px; padding-bottom: 150px; padding-left: 100px" class="border-2 border-blue-500 box-content">
                <div class="text-lg font-bold">Log In</div>
                <div>Welcome to UpShift!</div>
            </div>
        </div>
    </div>

</div>

@code {
    private class Model
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    public async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUsername(model.Username);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                Username = userAccount.Username,
                Role = userAccount.Role
            });
        navManager.NavigateTo("/", true);

        /*
        Console.WriteLine("Authenticate method called");
        await JSRuntime.InvokeVoidAsync("console.log", "Authenticate method called");
        await JSRuntime.InvokeVoidAsync("console.log", $"Username: {model.Username}");
        await JSRuntime.InvokeVoidAsync("console.log", $"Password: {model.Password}");

        await AuthController.LoginAsync(model.Username, model.Password);
        */
    }
}
