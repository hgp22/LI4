@page "/tickets"
@using UpShift.Data
@inject TicketService ticketService
@using UpShift.Models
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Administrator")]

<AuthorizeView Roles="Administrator">
    <Authorized>
        <div class="text-white">

            <div class="font-bold p-4 px-16 mb-8">
                <div class="text-3xl gap-4">Tickets</div>
            </div>

        </div>
        <div class="text-white flex justify-center">
            <div class="grid grid-cols-1 gap-4 w-full max-w-screen-xl mx-auto">

                @if (tickets != null && tickets.Any())
                {
                    @foreach (var ticket in tickets)
                    {
                        <div class="w-full border p-4 mb-8 flex items-center mx-4">
                            <div class="border p-4 rounded-md w-3/4">
                                <p class="font-bold">FROM: @ticket.ClientName</p>
                                <p>Email: @ticket.ClientEmail</p>
                                <p>Telefone: @ticket.ClientPhoneNumber</p>
                                <p>Mensagem: @ticket.Message</p>
                            </div>
                            <div class="w-1/4 flex justify-end items-center">
                                <button class="bg-blue-500 text-white p-5 mt-2" @onclick="() => DeleteTicket(ticket)">Delete</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-center">Não há tickets :).</p>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p class="text-center">Sem permissão para aceder a esta página.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private List<ClientMessage> tickets;

    protected override void OnInitialized()
    {
        LoadTickets();
    }

    private void LoadTickets()
    {
        tickets = ticketService.GetAll();
    }

    private void DeleteTicket(ClientMessage ticket)
    {
        ticketService.RemoveTicket(ticket);
        LoadTickets();
    }
}
